<!--

  This file is not meant to be used by anyone who isn't the official source of
  Tonic releases. It depends on a specific environment and will not work without
  it. If you have a strong urge to build Tonic releases, I suggest a cold shower.
  If nevertheless you decide to ignore this wise advice (and have tried
  the shower solution), here is a partial list of things you need to know:

  1. To build a Windows installer, this buildfile uses the NSIS installer compiler from
     http://nsis.sourceforge.net/.
  2. OS X releases require a Unix-like machine with dd, bash and hfsutils
     (http://www.mars.org/home/rob/proj/hfs).
-->

<project name="Tonic Release" default="release">

	<!-- Task definition for compressing jars with pack200 utility -->
    <taskdef name="pack200" classname="de.matthiasmann.p200ant.P200AntTask" classpath="/home/whp/var/sfw/apache-ant-1.6.5/pack200-task-de/p200ant.jar" />


    <!-- Makes releases for windows, unix, os x and plain source code -->
	<target name="release" depends="unix, windows, src" description="Build all normal releases"/>
	

	<target name="init">
		<dirname property="tonic.dir" file="." />
		<property name="build.dir" value="${tonic.dir}/build" />
		<property name="source.dir" value="${tonic.dir}/src" />

		<!-- Ask for Tonic version -->
		<!--<input message="Please specify the release version:" addproperty="release.version" />-->
		<property name="release.version" value="0"/>
		<property name="release.dir" value="tonic-${release.version}" />
    
		<mkdir dir="${release.dir}" />
	</target>


	<!-- Rebuilds for a specific platform -->
	<target name="rebuild">
		<echo message="Rebuilding Tonic for ${release.platform}" />
		<ant target="clean" dir="${tonic.dir}" />
		<ant target="build" dir="${tonic.dir}">
			<property name="build.target" value="1.5" />
		</ant>
	</target>
	

	<!-- Unix release. Resulting file is ${unix-archive} -->
	<target name="unix" depends="init" description="Builds a release for Unix/Linux">
		<echo message="Creating unix/linux release" />
		
		<property name="release.unix.dir" value="${release.dir}/unix" />
    
		<delete dir="${release.unix.dir}" />
    
		<mkdir dir="${release.dir}" />
		<mkdir dir="${release.unix.dir}" />
		
		<antcall target="rebuild">
			<param name="release.platform" value="unix" />
			<param name="build.target" value="1.5" />
		</antcall>
		
		<property name="unix-dir-to-tar" value="${release.unix.dir}/tmp" />
		<property name="unix-files-dir" value="${unix-dir-to-tar}/tonic-${release.version}" />
		<mkdir dir="${unix-dir-to-tar}" />
		<mkdir dir="${unix-files-dir}" />
		<copy todir="${unix-files-dir}">
			<fileset dir="${build.dir}" excludes="lnfs/jgoodies-windows.jar" />
			<!--<fileset dir="." includes="changelog.txt copyright.txt gpl.txt" />
			<fileset dir="unix" includes="README" />-->
		</copy>
		
		<property name="unix-tar" value="${release.unix.dir}/tonic-${release.version}-unix.tar" />
		<property name="unix-gz" value="${unix-tar}.gz" />

        <pack200 configFile="./pack200.config">

            <fileset dir="${unix-files-dir}">
                <include name="**/*.jar" />
            </fileset>

        </pack200>
        <delete>
            <fileset dir="${unix-files-dir}">
                <include name="**/*.jar" />
            </fileset>

        </delete>

        <tar destfile="${unix-tar}">
			<tarfileset dir="${unix-dir-to-tar}" excludes="*/jin" />
			<tarfileset dir="${unix-dir-to-tar}" includes="*/jin" mode="755" />
		</tar>
		
		<gzip src="${unix-tar}" zipfile="${unix-gz}" />
		
		<delete dir="${unix-dir-to-tar}" />
		<delete file="${unix-tar}" />
		
		<property name="unix-archive" value="${unix-gz}" />
	</target>
	

	
	<!-- 
	     Windows release. Resulting files are ${win-install} and ${win-archive}.
	-->
	<target name="windows" depends="init" description="Builds a release for Windows">
		<echo message="Creating windows release" />

		<!--<input message="Specify the NSIS executable" addproperty="win.setup.maker" />-->
		<property name="release.win.dir" value="${release.dir}/win" />
    
		<delete dir="${release.win.dir}" />
		<mkdir dir="${release.win.dir}" />
    
		<antcall target="rebuild">
			<param name="release.platform" value="windows" />
		</antcall>

		<property name="dir-to-inst" value="${release.win.dir}/files" />
		<property name="win-install" value="${release.win.dir}/tonic-${release.version}-win.exe" />
		<property name="win-archive" value="${release.win.dir}/tonic-${release.version}-win.zip" />

		<!-- Build the release -->
		<mkdir dir="${dir-to-inst}" />
		<copy todir="${dir-to-inst}">
			<fileset dir="${build.dir}" />
			<!--<fileset dir="." includes="changelog.txt copyright.txt gpl.txt" />-->
		</copy>
		<antcall target="win-create-install">
			<param name="target-dir" value="${dir-to-inst}" />
			<param name="exe" value="${win-install}" />
			<param name="zip" value="${win-archive}" />
		</antcall>
		<delete dir="${dir-to-inst}" />

	</target>
	
	<!-- 
	    Helper target for the windows target. Builds a single windows release
	    (an installer and an archive). Parameters are:
	    target-dir: The directory to install.
	    exe: The name of the install executable
	    zip: The name of tha archive
	-->
	<target name="win-create-install">
		<!-- Get the command prefix for NSIS -->
		<condition property="nsis-prefix" value="/" else="-">
			<os family="windows"/>
		</condition>
		<!--<exec dir="." executable="${win.setup.maker}" failonerror="yes">
			<arg value="${nsis-prefix}NOCD" /> --><!-- Don't change into the .nsi file's directory --><!--
			<arg value="${nsis-prefix}V2" /> --><!-- Low verbosity --><!--
			<arg value="${nsis-prefix}Ddir=${target-dir}${file.separator}" /> --><!-- The directory whose contents to install --><!--
			<arg value="${nsis-prefix}Dfile=${exe}" /> --><!-- The installer file --><!--
			<arg value="${nsis-prefix}Dver=${release.version}" /> --><!-- The Jin version --><!--
			<arg value="win${file.separator}installer.nsi" />
		</exec>-->
		<zip destfile="${zip}" basedir="${dir-to-inst}" />
	</target>
	
	
	
	<!-- OS X release. Resulting file is ${osx-install} -->
	<target name="osx" depends="init" description="Builds a release for Mac OS X">
		<echo message="Creating Mac OS X release" />

		<property name="release.osx.dir" value="${release.dir}/osx" />
		<delete dir="${release.osx.dir}" />
		<mkdir dir="${release.osx.dir}" />
		
		<antcall target="rebuild">
			<param name="release.platform" value="macosx" />
		</antcall>
		<property name="app-dir.name" value="Tonic.app" />
		<property name="app-dir" value="${release.osx.dir}/${app-dir.name}" />
		<mkdir dir="${app-dir}/Contents/Resources/Java" />
		<!--<copy todir="${app-dir}">
			<fileset dir="." includes="changelog.txt copyright.txt gpl.txt" />
		</copy>-->
		<copy todir="${app-dir}/Contents">
			<fileset dir="osx" includes="Info.plist PkgInfo" />
			<filterset>
				<filter token="VERSION" value="${release.version}" />
			</filterset>
		</copy>
		<copy todir="${app-dir}/Contents/Resources" file="osx/icon.icns" />
		<copy todir="${app-dir}/Contents/Resources/Java">
			<fileset dir="${build.dir}" excludes="lnfs/**" />
		</copy>
		<mkdir dir="${app-dir}/Contents/MacOS" />
		<copy todir="${app-dir}/Contents/MacOS" file="osx/JavaApplicationStub" />
		
		<antcall target="osx-package">
			<param name="release.name" value="tonic-${release.version}-osx" />
		</antcall>
		
		<delete dir="${app-dir}" />
		<property name="osx-install" value="tonic-${release.version}-osx.dmg" />
	</target>
	
	
	<!-- Helper target for the osx target. Builds a .dmg.gz file from the Jin.app directory -->
	<target name="osx-package">
		<property name="dmg-filename" value="${release.name}.dmg" />
		<exec executable="dd" dir="${release.osx.dir}" failonerror="yes">
			<arg line="if=/dev/zero of=${dmg-filename} bs=1M count=30" />
		</exec>
		<exec executable="hformat" dir="${release.osx.dir}" failonerror="yes">
			<arg line="-l Tonic-${release.version} ${dmg-filename}" />
		</exec>
		<exec executable="${basedir}/osx/hcp" dir="${release.osx.dir}" failonerror="yes">
			<arg line="${app-dir.name}" />
		</exec>
		<gzip src="${release.osx.dir}/${dmg-filename}" zipfile="${release.osx.dir}/${dmg-filename}.gz" />
		<delete file="${release.osx.dir}/${dmg-filename}" />
	</target>

	<!-- A helper target for copying a specified list of resources -->
	<target name="copy-applet-resources">
		<mkdir dir="${dir-to-tar}/resources/${resource.type}/${resource.name}" />
    	<unzip src="${build.dir}/resources/${resource.type}/${resource.name}.zip"
    	       dest="${dir-to-tar}/resources/${resource.type}/${resource.name}" />
	</target>
	
	
	<!-- Source. Resulting files are ${src-archive} and ${src-archive-no-extras} -->
	<target name="src" depends="init" description="Builds a source release">
		<echo message="Creating Source release" />

		<property name="release.src.dir" value="${release.dir}/src" />
    
		<delete dir="${release.src.dir}" />
		<mkdir dir="${release.src.dir}" />
		
		<property name="src-archive-dir" value="${release.src.dir}/tmp" />
		<property name="src-archive-files" value="${src-archive-dir}/tonic-${release.version}" />
		<mkdir dir="${src-archive-dir}" />
		<mkdir dir="${src-archive-files}" />		
		<copy todir="${src-archive-files}">
			<fileset dir="${tonic.dir}" includes="src/** resources/** build.xml manifest.txt" />
			<fileset dir="." includes="changelog.txt copyright.txt gpl.txt" />
			<fileset dir="src" includes="COMPILING" />
		</copy>
		
 		<propertyfile file="${src-archive-files}/src/free/jin/resources/app.props">
			<entry key="app.version" value="${release.version}" />
		</propertyfile>
		
		<property name="src-tar" value="${release.src.dir}/tonic-${release.version}-src.tar" />
		<property name="src-archive" value="${src-tar}.gz" />
		<tar destfile="${src-tar}">
			<tarfileset dir="${src-archive-dir}" />
		</tar>
		<gzip src="${src-tar}" zipfile="${src-archive}" />
		<delete file="${src-tar}" />
		
		<delete dir="${src-archive-dir}" />
	</target>

</project>
